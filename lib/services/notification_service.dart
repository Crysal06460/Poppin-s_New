import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:io';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_app_badger/flutter_app_badger.dart';

class NotificationService {
  static final FirebaseMessaging _messaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  // Dans notification_service.dart, remplacez le d√©but de la m√©thode initialize() :

  static Future<void> initialize() async {
    try {
      print('üîî Initialisation du service de notifications...');

      // 1. üî• NOUVEAU : Demander les permissions avec gestion am√©lior√©e
      NotificationSettings settings = await _messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
        carPlay: false,
        criticalAlert: false,
        announcement: false,
      );

      print('üîî Permissions accord√©es: ${settings.authorizationStatus}');

      // üî• CORRECTION : Accepter aussi 'provisional' et 'notDetermined' sur iOS
      bool permissionsOk =
          settings.authorizationStatus == AuthorizationStatus.authorized ||
              settings.authorizationStatus == AuthorizationStatus.provisional;

      // Sur iOS, parfois les permissions restent 'notDetermined' mais fonctionnent quand m√™me
      if (Platform.isIOS &&
          settings.authorizationStatus == AuthorizationStatus.notDetermined) {
        print('‚ö†Ô∏è Permissions iOS notDetermined, tentative de continuation...');
        permissionsOk = true; // Essayer quand m√™me sur iOS
      }

      if (!permissionsOk &&
          settings.authorizationStatus == AuthorizationStatus.denied) {
        print('‚ùå Permissions notifications refus√©es d√©finitivement');
        print('‚ö†Ô∏è L\'app continue sans notifications push');
        await _setupLocalNotificationsOnly();
        return;
      }

      // 2. Configuration sp√©ciale iOS avec APNS
      if (Platform.isIOS) {
        print('üì± Configuration iOS avec APNS...');

        // üî• NOUVEAU : Attendre un peu plus longtemps pour iOS
        await Future.delayed(Duration(seconds: 1));

        // Attendre que le token APNS soit disponible
        String? apnsToken = await _messaging.getAPNSToken();
        int retryCount = 0;
        const maxRetries = 8; // Augment√© de 5 √† 8

        while (apnsToken == null && retryCount < maxRetries) {
          print(
              '‚è≥ Attente du token APNS (tentative ${retryCount + 1}/$maxRetries)...');
          await Future.delayed(
              Duration(seconds: 3)); // Augment√© de 2 √† 3 secondes
          apnsToken = await _messaging.getAPNSToken();
          retryCount++;
        }

        if (apnsToken != null) {
          print('‚úÖ Token APNS obtenu: ${apnsToken.substring(0, 20)}...');
        } else {
          print(
              '‚ùå Impossible d\'obtenir le token APNS apr√®s $maxRetries tentatives');
          print('‚ö†Ô∏è L\'app continue sans notifications push');
          await _setupLocalNotificationsOnly();
          return;
        }
      }

      // 3. Configuration des notifications locales
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      const DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
        requestAlertPermission: true, // üî• CHANG√â : Redemander ici aussi
        requestBadgePermission: true, // üî• CHANG√â : Redemander ici aussi
        requestSoundPermission: true, // üî• CHANG√â : Redemander ici aussi
        onDidReceiveLocalNotification: _onDidReceiveLocalNotification,
      );

      const InitializationSettings initializationSettings =
          InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );

      await _localNotifications.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
      );

      // 4. üî• AM√âLIOR√â : R√©cup√©rer le token FCM avec gestion d'erreur SSL
      print('üîÑ R√©cup√©ration du token FCM...');
      String? token;

      try {
        // Attendre un peu avant de demander le token FCM
        await Future.delayed(Duration(seconds: 2));
        token = await _messaging.getToken();
      } catch (e) {
        if (e.toString().contains('SSL error') ||
            e.toString().contains('-1200')) {
          print('‚ö†Ô∏è Erreur SSL d√©tect√©e, tentative de r√©cup√©ration...');

          // Attendre plus longtemps et r√©essayer
          await Future.delayed(Duration(seconds: 5));

          try {
            token = await _messaging.getToken();
            print('‚úÖ Token FCM r√©cup√©r√© apr√®s retry');
          } catch (e2) {
            print('‚ùå √âchec retry token FCM: $e2');
            print('‚ö†Ô∏è L\'app continue sans notifications push');

            // Continuer avec les notifications locales uniquement
            await _setupLocalNotificationsOnly();
            return;
          }
        } else {
          print('‚ùå Erreur non-SSL lors r√©cup√©ration token: $e');
          print('‚ö†Ô∏è L\'app continue sans notifications push');
          await _setupLocalNotificationsOnly();
          return;
        }
      }

      if (token != null) {
        print('üî• TOKEN FCM OBTENU: ${token.substring(0, 50)}...');
        await _saveTokenToFirestore(token);
      } else {
        print('‚ùå Token FCM non disponible');
        print('‚ö†Ô∏è L\'app continue sans notifications push');
        await _setupLocalNotificationsOnly();
        return;
      }

      // 5. √âcouter les messages en foreground
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

      // 6. √âcouter les clics sur notifications
      FirebaseMessaging.onMessageOpenedApp.listen(_handleMessageClick);

      // 7. G√©rer les messages re√ßus quand l'app √©tait ferm√©e
      try {
        RemoteMessage? initialMessage = await _messaging.getInitialMessage();
        if (initialMessage != null) {
          _handleMessageClick(initialMessage);
        }
      } catch (e) {
        print('‚ö†Ô∏è Erreur getInitialMessage: $e');
      }

      // 8. √âcouter les changements de token
      _messaging.onTokenRefresh.listen((String token) {
        print('üîÑ Token FCM mis √† jour: ${token.substring(0, 50)}...');
        _saveTokenToFirestore(token);
      });

      print('‚úÖ Service de notifications initialis√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation des notifications: $e');

      // Si c'est une erreur SSL ou permissions, continuer sans crash
      if (e.toString().contains('SSL error') ||
          e.toString().contains('-1200') ||
          e.toString().contains('permission')) {
        print('‚ö†Ô∏è L\'app continue sans notifications push √† cause de: $e');
        await _setupLocalNotificationsOnly();
        return;
      }

      // Pour les autres erreurs, ne pas crasher non plus
      print('‚ö†Ô∏è L\'app continue malgr√© l\'erreur: $e');
      await _setupLocalNotificationsOnly();
    }
  }

// üî• NOUVELLE M√âTHODE : Configuration notifications locales uniquement
  static Future<void> _setupLocalNotificationsOnly() async {
    try {
      print('üîß Configuration notifications locales uniquement...');

      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      const DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
        requestAlertPermission: false,
        requestBadgePermission: false,
        requestSoundPermission: false,
        onDidReceiveLocalNotification: _onDidReceiveLocalNotification,
      );

      const InitializationSettings initializationSettings =
          InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );

      await _localNotifications.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
      );

      print('‚úÖ Notifications locales configur√©es (sans push)');
    } catch (e) {
      print('‚ùå Erreur configuration notifications locales: $e');
    }
  }

  static Future<void> clearBadge() async {
    try {
      print('üîß D√©but clearBadge...');

      // R√©initialiser le badge avec flutter_app_badger
      await FlutterAppBadger.removeBadge();
      print('‚úÖ FlutterAppBadger.removeBadge() termin√©');

      // Force √† 0 explicitement
      await FlutterAppBadger.updateBadgeCount(0);
      print('‚úÖ FlutterAppBadger.updateBadgeCount(0) termin√©');

      // Annuler toutes les notifications locales
      await _localNotifications.cancelAll();
      print('‚úÖ _localNotifications.cancelAll() termin√©');

      print('‚úÖ Badge r√©initialis√© compl√®tement');
    } catch (e) {
      print('‚ùå Erreur r√©initialisation badge: $e');
    }
  }

// M√©thode pour d√©finir le nombre du badge
  static Future<void> setBadgeCount(int count) async {
    try {
      if (count > 0) {
        await FlutterAppBadger.updateBadgeCount(count);
      } else {
        await FlutterAppBadger.removeBadge();
      }
      print('‚úÖ Badge mis √† jour: $count');
    } catch (e) {
      print('‚ùå Erreur mise √† jour badge: $e');
    }
  }

// M√©thode pour v√©rifier si les badges sont support√©s
  static Future<bool> isBadgeSupported() async {
    return await FlutterAppBadger.isAppBadgeSupported();
  }

  // Callback pour les notifications locales iOS (anciennes versions)
  static void _onDidReceiveLocalNotification(
      int id, String? title, String? body, String? payload) {
    print('üì± Notification locale re√ßue: $title - $body');
  }

  // Callback pour les r√©ponses aux notifications
  static void _onDidReceiveNotificationResponse(NotificationResponse response) {
    print('üîî R√©ponse notification: ${response.payload}');
    // Ici vous pouvez naviguer vers l'√©cran appropri√©
  }

  // Sauvegarder le token FCM dans Firestore
  static Future<void> _saveTokenToFirestore(String token) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await FirebaseFirestore.instance
            .collection('users')
            .doc(user.email?.toLowerCase())
            .update({
          'fcmToken': token,
          'lastTokenUpdate': FieldValue.serverTimestamp(),
          'platform': Platform.isIOS ? 'ios' : 'android',
        });
        print('‚úÖ Token FCM sauvegard√© pour ${user.email}');
      }
    } catch (e) {
      print('‚ùå Erreur sauvegarde token: $e');
    }
  }

  // G√©rer les messages en foreground
  static Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üì® Message re√ßu en foreground: ${message.notification?.title}');

    // Afficher notification locale
    const AndroidNotificationDetails androidDetails =
        AndroidNotificationDetails(
      'messages_channel',
      'Messages',
      channelDescription: 'Notifications pour les nouveaux messages',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
    );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      categoryIdentifier: 'message_category',
    );

    const NotificationDetails notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _localNotifications.show(
      message.hashCode,
      message.notification?.title ?? 'Nouveau message',
      message.notification?.body ?? 'Vous avez re√ßu un nouveau message',
      notificationDetails,
      payload: message.data.toString(),
    );
  }

  // G√©rer les clics sur notifications
  static void _handleMessageClick(RemoteMessage message) {
    print('üîî Notification cliqu√©e: ${message.data}');
    // Ici vous pouvez naviguer vers l'√©cran appropri√©
    // Exemple: NavigationService.navigateToMessages(message.data['childId']);
  }

  // Envoyer une notification √† un utilisateur sp√©cifique
  static Future<void> sendNotificationToUser({
    required String recipientUserId,
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    try {
      print('üì§ Envoi notification vers: $recipientUserId');

      // Cr√©er le document dans Firestore pour d√©clencher la Cloud Function
      await FirebaseFirestore.instance.collection('notifications').add({
        'recipientUserId': recipientUserId,
        'title': title,
        'body': body,
        'data': data ?? {},
        'timestamp': FieldValue.serverTimestamp(),
        'sent': false,
        'platform': Platform.isIOS ? 'ios' : 'android',
      });

      print('‚úÖ Document notification cr√©√© dans Firestore');
    } catch (e) {
      print('‚ùå Erreur envoi notification: $e');
    }
  }

  // M√©thode pour tester les notifications
  static Future<void> testNotification() async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'test_channel',
        'Test',
        channelDescription: 'Notifications de test',
        importance: Importance.high,
        priority: Priority.high,
      );

      const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      await _localNotifications.show(
        123,
        'Test Notification',
        'Ceci est un test des notifications',
        notificationDetails,
      );

      print('‚úÖ Notification de test envoy√©e');
    } catch (e) {
      print('‚ùå Erreur test notification: $e');
    }
  }
}
